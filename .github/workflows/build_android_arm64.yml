name: Build Android APK (arm64) with Foreground Service & AOD

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: "Flutter build mode"
        required: true
        default: "release"
        type: choice
        options: [release, debug]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Flutter doctor & pub get
        run: |
          flutter --version
          flutter doctor -v
          flutter pub get

      - name: Disable Gradle FS watching (avoid 'Already watching path')
        run: |
          echo "org.gradle.vfs.watch=false" >> ./android/gradle.properties

      - name: Ensure namespace & Android config (Kotlin DSL)
        run: |
          set -euo pipefail
          APP_GRADLE="./android/app/build.gradle.kts"

          # 如果还没有 namespace/compileSdk/targetSdk，则插入；否则尽量就地替换为期望值
          if ! grep -q 'namespace *= *"' "$APP_GRADLE"; then
            sed -i 's/android[[:space:]]*{/&\
    namespace = "com.example.antipro"\
    compileSdk = 35\
    defaultConfig {\
        minSdk = 24\
        targetSdk = 35\
    }/' "$APP_GRADLE"
          else
            sed -i 's/namespace *= *".*"/namespace = "com.example.antipro"/' "$APP_GRADLE"
            sed -i 's/compileSdk *= *[0-9][0-9]*/compileSdk = 35/' "$APP_GRADLE" || true
            sed -i 's/targetSdk *= *[0-9][0-9]*/targetSdk = 35/' "$APP_GRADLE" || true
            if ! grep -q 'minSdk' "$APP_GRADLE"; then
              sed -i 's/defaultConfig *{/defaultConfig {\n        minSdk = 24/' "$APP_GRADLE"
            fi
          fi

          # 添加 AppCompat 等依赖（若不存在）
          if ! grep -q 'androidx.appcompat:appcompat' "$APP_GRADLE"; then
            sed -i 's/dependencies *{/dependencies {\n    implementation("androidx.appcompat:appcompat:1.7.0")\n    implementation("androidx.core:core-ktx:1.13.1")\n    implementation("androidx.activity:activity-ktx:1.9.3")\n    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.6")/' "$APP_GRADLE"
          fi

      - name: Inject native (Kotlin Service/Activity + AOD layout + Manifest)
        run: |
          set -euo pipefail

          PKG_DIR="android/app/src/main/kotlin/com/example/antipro"
          RES_DIR="android/app/src/main/res/layout"
          MANIFEST="android/app/src/main/AndroidManifest.xml"

          mkdir -p "$PKG_DIR" "$RES_DIR"

          # Activity：锁屏低亮度 + 倒计时展示
          cat > "$PKG_DIR/FocusLockActivity.kt" <<'KOT'
package com.example.antipro

import android.os.Bundle
import android.view.WindowManager
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class FocusLockActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_focus_lock)

        // 低亮度 & 保持亮屏 & 锁屏显示
        window.addFlags(
            WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON or
            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED or
            WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON
        )
        val lp = window.attributes
        lp.screenBrightness = 0.02f
        window.attributes = lp

        val tv = findViewById<TextView>(R.id.tvCountdown)
        tv.text = intent?.getStringExtra("remaining") ?: "--:--"
    }
}
KOT

          # Foreground Service：通知含“停止”按钮；点击停止 -> 回到App；广播一次“打断”
          cat > "$PKG_DIR/FocusForegroundService.kt" <<'KOT'
package com.example.antipro

import android.app.*
import android.content.*
import android.os.Build
import android.os.IBinder
import androidx.core.app.NotificationCompat

class FocusForegroundService : Service() {
    companion object {
        const val CHANNEL_ID = "focus_channel"
        const val NOTI_ID = 11001
        const val ACTION_STOP = "com.example.antipro.FOCUS_STOP"
        const val ACTION_INTERRUPTED_BROADCAST = "com.example.antipro.FOCUS_INTERRUPTED"
    }

    override fun onBind(intent: Intent?): IBinder? = null

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        ensureChannel()

        val stopIntent = Intent(this, FocusForegroundService::class.java).apply { action = ACTION_STOP }
        val pStop = PendingIntent.getService(this, 2001, stopIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)

        val launch = packageManager.getLaunchIntentForPackage(packageName)?.apply {
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)
        }
        val pLaunch = PendingIntent.getActivity(this, 2002, launch,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)

        val n = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_lock_idle_alarm)
            .setContentTitle("专注中")
            .setContentText("Focus session running")
            .setOngoing(true)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .addAction(0, "停止", pStop)
            .setContentIntent(pLaunch)
            .build()

        startForeground(NOTI_ID, n)

        if (intent?.action == ACTION_STOP) {
            // 通过广播把“打断”信息回传（Flutter 侧可用 BroadcastReceiver + MethodChannel 转发）
            sendBroadcast(Intent(ACTION_INTERRUPTED_BROADCAST))
            stopForeground(STOP_FOREGROUND_REMOVE)
            stopSelf()
            // 回到 App
            if (launch != null) startActivity(launch)
        }
        return START_STICKY
    }

    private fun ensureChannel() {
        if (Build.VERSION.SDK_INT >= 26) {
            val nm = getSystemService(NotificationManager::class.java)
            val ch = NotificationChannel(CHANNEL_ID, "Focus Session", NotificationManager.IMPORTANCE_LOW).apply {
                setShowBadge(false)
                enableVibration(false)
                enableLights(false)
            }
            nm.createNotificationChannel(ch)
        }
    }
}
KOT

          # AOD风格的极简锁屏界面
          cat > "$RES_DIR/activity_focus_lock.xml" <<'XML'
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/aod_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#000000"
    android:keepScreenOn="true">

    <TextView
        android:id="@+id/tvCountdown"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="--:--"
        android:textSize="42sp"
        android:textStyle="bold"
        android:textColor="#42FFFFFF"
        android:layout_gravity="center" />
</FrameLayout>
XML

          # Manifest：移除过时的 package=，并声明权限、Activity、Service
          sed -i 's/ package="[^"]*"//g' "$MANIFEST"

          # 在 </application> 之前插入组件（若尚未插入）
          if ! grep -q 'FocusForegroundService' "$MANIFEST"; then
            sed -i '/<\/application>/ i \
    <activity android:name=".FocusLockActivity"\
              android:exported="false"\
              android:showWhenLocked="true"\
              android:turnScreenOn="true"\
              android:theme="@style/Theme.AppCompat.DayNight.NoActionBar" />\
\
    <service\
        android:name=".FocusForegroundService"\
        android:exported="false"\
        android:foregroundServiceType="mediaProjection|dataSync"/>\
' "$MANIFEST"
          fi

          # 在 </manifest> 之前插入权限（若尚未插入）
          if ! grep -q 'FOREGROUND_SERVICE' "$MANIFEST"; then
            sed -i '/<\/manifest>/ i \
<uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>\
<uses-permission android:name="android.permission.WAKE_LOCK"/>\
' "$MANIFEST"
          fi

      - name: Flutter build (arm64 only)
        env:
          # 只生成 arm64 的 APK
          EXTRA_ARGS: ${{ github.event.inputs.build_mode == 'debug' && '--debug' || '--release' }}
        run: |
          set -euo pipefail
          flutter clean
          flutter build apk $EXTRA_ARGS --target-platform=android-arm64 --split-per-abi --tree-shake-icons
          echo "== List outputs =="
          ls -R build/app/outputs || true

      - name: Find arm64 APK path
        id: find_apk
        run: |
          set -euo pipefail
          # Flutter 通常输出到这个目录
          ROOT="build/app/outputs/flutter-apk"
          echo "Listing $ROOT:"
          ls -lah "$ROOT" || true

          APK_PATH=""
          if [ -f "$ROOT/app-arm64-v8a-release.apk" ]; then APK_PATH="$ROOT/app-arm64-v8a-release.apk"; fi
          if [ -f "$ROOT/app-arm64-v8a-debug.apk" ]; then APK_PATH="$ROOT/app-arm64-v8a-debug.apk"; fi

          # 兜底匹配
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(ls $ROOT/*arm64*.apk 2>/dev/null | head -n1 || true)
          fi

          if [ -z "$APK_PATH" ]; then
            echo "No APK found under $ROOT"
            exit 1
          fi

          echo "apk_path=$APK_PATH" >> "$GITHUB_OUTPUT"
          echo "Found: $APK_PATH"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: anti-procrastination-arm64-${{ github.sha }}
          path: ${{ steps.find_apk.outputs.apk_path }}
          if-no-files-found: error
