name: Build Android APK v0.3.5 - Foreground Service AOD (arm64, fix manifest package)

on:
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Create Flutter project if missing (no overwrite)
        run: |
          set -euo pipefail
          if [ ! -f pubspec.yaml ]; then
            flutter create . --platforms=android --project-name anti_procrastination --org com.example.antipro
          fi

      - name: Detect legacy Android v1 embedding
        id: detect_v1
        run: |
          set -euo pipefail
          hits="$(grep -R -nE 'io\.flutter\.app\.Flutter(Application|Activity)|registerWith\(' android || true)"
          if [ -n "$hits" ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "Legacy v1 embedding references detected:"
            echo "$hits"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "No v1 embedding references detected."
          fi

      - name: Regenerate android/ with embedding v2 (if needed)
        if: ${{ steps.detect_v1.outputs.found == 'true' }}
        run: |
          set -euo pipefail
          rm -rf android
          flutter create . --platforms=android --project-name anti_procrastination --org com.example.antipro --overwrite

      - name: Generate temp keystore & key.properties (sign release)
        run: |
          set -euo pipefail
          mkdir -p android/app
          keytool -genkey -noprompt \
            -keystore android/app/upload-keystore.jks \
            -alias upload \
            -storepass android -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Temp, OU=CI, O=CI, L=, S=, C=US"
          cat > android/key.properties <<'PROPS'
          storePassword=android
          keyPassword=android
          keyAlias=upload
          storeFile=upload-keystore.jks
          PROPS

      - name: Inject native (Kotlin Service + Lock Activity + Manifest w/ embedding=2, no package attr)
        run: |
          set -euo pipefail
          ORG_PATH="com/example/antipro"
          mkdir -p android/app/src/main/kotlin/$ORG_PATH
          mkdir -p android/app/src/main/res/layout

          cat > android/app/src/main/kotlin/$ORG_PATH/MainActivity.kt <<'KOT'
          package com.example.antipro

          import android.content.BroadcastReceiver
          import android.content.Context
          import android.content.Intent
          import android.content.IntentFilter
          import android.os.Build
          import android.os.Handler
          import android.os.Looper
          import io.flutter.embedding.android.FlutterActivity
          import io.flutter.embedding.engine.FlutterEngine
          import io.flutter.plugin.common.MethodChannel

          class MainActivity : FlutterActivity() {
              private val CHANNEL = "focus_service"
              private var eventsReceiver: BroadcastReceiver? = null

              companion object {
                  var channel: MethodChannel? = null
                  fun emit(method: String, args: Map<String, Any?>? = null) {
                      val ch = channel ?: return
                      Handler(Looper.getMainLooper()).post { ch.invokeMethod(method, args) }
                  }
              }

              override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
                  super.configureFlutterEngine(flutterEngine)
                  val ch = MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL)
                  channel = ch
                  ch.setMethodCallHandler { call, result ->
                      when (call.method) {
                          "start" -> {
                              val minutes = (call.argument<Int>("minutes") ?: 25)
                              val dim = (call.argument<Double>("dim") ?: 0.05).toFloat()
                              val lock = (call.argument<Boolean>("lock") ?: false)

                              val svc = Intent(this, FocusForegroundService::class.java)
                              svc.putExtra("minutes", minutes)
                              startForegroundServiceCompat(svc)

                              if (lock) {
                                  val intent = Intent(this, FocusLockActivity::class.java)
                                  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)
                                  intent.putExtra("dim", dim)
                                  startActivity(intent)
                              }
                              result.success(true)
                          }
                          "stop" -> {
                              stopService(Intent(this, FocusForegroundService::class.java))
                              result.success(true)
                          }
                          else -> result.notImplemented()
                      }
                  }
              }

              override fun onStart() {
                  super.onStart()
                  val filter = IntentFilter().apply {
                      addAction("FOCUS_TICK")
                      addAction("FOCUS_FINISH")
